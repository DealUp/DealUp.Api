// <auto-generated />
using System;
using System.Collections.Generic;
using DealUp.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DealUp.Database.Migrations
{
    [DbContext(typeof(PostgresqlContext))]
    [Migration("20250323222737_AddInitialMigration")]
    partial class AddInitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DealUp.Domain.Abstractions.EntityBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DealUp.Domain.Advertisement.Advertisement", b =>
                {
                    b.HasBaseType("DealUp.Domain.Abstractions.EntityBase");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.ComplexProperty<Dictionary<string, object>>("Location", "DealUp.Domain.Advertisement.Advertisement.Location#Location", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Latitude")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("Longitude")
                                .HasColumnType("numeric");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Statistics", "DealUp.Domain.Advertisement.Advertisement.Statistics#AttendanceStatistics", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("ChatCount")
                                .HasColumnType("integer");

                            b1.Property<int>("FavoriteCount")
                                .HasColumnType("integer");

                            b1.Property<int>("ViewCount")
                                .HasColumnType("integer");
                        });

                    b.HasIndex("CategoryId");

                    b.HasIndex("SellerId");

                    b.ToTable("Advertisement");
                });

            modelBuilder.Entity("DealUp.Domain.Advertisement.AdvertisementCategory", b =>
                {
                    b.HasBaseType("DealUp.Domain.Abstractions.EntityBase");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("AdvertisementCategory");
                });

            modelBuilder.Entity("DealUp.Domain.Advertisement.AdvertisementPhoto", b =>
                {
                    b.HasBaseType("DealUp.Domain.Abstractions.EntityBase");

                    b.Property<Guid>("AdvertisementId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("AdvertisementId");

                    b.ToTable("AdvertisementPhoto");
                });

            modelBuilder.Entity("DealUp.Domain.Advertisement.Product", b =>
                {
                    b.HasBaseType("DealUp.Domain.Abstractions.EntityBase");

                    b.Property<Guid>("AdvertisementId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Labels")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("AdvertisementId")
                        .IsUnique();

                    b.ToTable("Product");
                });

            modelBuilder.Entity("DealUp.Domain.Seller.SellerProfile", b =>
                {
                    b.HasBaseType("DealUp.Domain.Abstractions.EntityBase");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("SellerProfile");
                });

            modelBuilder.Entity("DealUp.Domain.User.User", b =>
                {
                    b.HasBaseType("DealUp.Domain.Abstractions.EntityBase");

                    b.Property<string>("Password")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("DealUp.Domain.User.UserPendingConfirmation", b =>
                {
                    b.HasBaseType("DealUp.Domain.Abstractions.EntityBase");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("UserId");

                    b.ToTable("UserPendingConfirmation");
                });

            modelBuilder.Entity("DealUp.Domain.Advertisement.Advertisement", b =>
                {
                    b.HasOne("DealUp.Domain.Advertisement.AdvertisementCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DealUp.Domain.Seller.SellerProfile", "Seller")
                        .WithMany("Advertisements")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("DealUp.Domain.Advertisement.AdvertisementPhoto", b =>
                {
                    b.HasOne("DealUp.Domain.Advertisement.Advertisement", null)
                        .WithMany("Photos")
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DealUp.Domain.Advertisement.Product", b =>
                {
                    b.HasOne("DealUp.Domain.Advertisement.Advertisement", null)
                        .WithOne("Product")
                        .HasForeignKey("DealUp.Domain.Advertisement.Product", "AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DealUp.Domain.Seller.SellerProfile", b =>
                {
                    b.HasOne("DealUp.Domain.User.User", "User")
                        .WithOne()
                        .HasForeignKey("DealUp.Domain.Seller.SellerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DealUp.Domain.User.UserPendingConfirmation", b =>
                {
                    b.HasOne("DealUp.Domain.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DealUp.Domain.Advertisement.Advertisement", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("DealUp.Domain.Seller.SellerProfile", b =>
                {
                    b.Navigation("Advertisements");
                });
#pragma warning restore 612, 618
        }
    }
}
